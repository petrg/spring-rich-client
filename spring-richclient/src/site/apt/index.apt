 -----
 Spring-richclient home
 -----
 Geoffrey De Smet
 -----

What is spring-richclient?

    Spring-rich adds value for people needing to develop Swing applications
    and do so in a way that promotes consistent, well-designed, configurable Swing applications.
    The spring-rich developers strongly feel the "old days" of Swing apps "not looking native"
    and not being performant or web-accessible are gone with JDK1.4.2 and 1.5 and webstart.
    It is our belief the only problem with Swing is that there are a limited number
    of higher-level abstractions available that assist in making the toolkit simpler
    and easier to use, and a limited number of design best practices.
    The goal of spring-richclient is to provide that.

    TODO: clean this up description and make it more consise and to the point.

News

    * <<2006-03-12>>: maven2ization done in subversion

    * <<2006-02-25>>: maven2ization proposed

Abstract

    The Spring Rich Client Project (RCP) is a sub-project of The Spring Framework.
    Spring-RCP's mission is to provide an elegant way to build highly-configurable,
    GUI-standards-following rich-client applications faster by leveraging the Spring
    Framework, and a rich library of UI factories and support classes.  Initial
    focus is on providing support for Swing applications but a goal of Spring-RCP is
    to be view agnostic as much as possible.

    The Spring Framework is a layered Java/J2EE application framework, based on code
    published in "Expert One-on-One J2EE Design and Development" by Rod Johnson
    (Wrox, 2002). Spring includes:

    * Powerful JavaBeans-based configuration management, applying
    Inversion-of-Control principles. This makes wiring up applications quick and
    easy. No more singletons littered throughout your codebase, no more arbitrary
    properties files: one consistent and elegant approach everywhere. This core bean
    factory can be used in any environment, from applets to J2EE containers.

    * Generic abstraction layer for transaction management, allowing for pluggable
    transaction managers, and making it easy to demarcate transactions without
    dealing with low-level issues. Generic strategies for JTA and a single JDBC
    DataSource are included. In contrast to plain JTA or EJB CMT, Spring's
    transaction support is not tied to J2EE environments.

    * JDBC abstraction layer that offers a meaningful exception hierarchy (no more
    pulling vendor codes out of SQLException), simplifies error handling, and
    greatly reduces the amount of code you'll need to write. You'll never need to
    write another finally block to use JDBC again. The JDBC-oriented exceptions
    comply to Spring's generic DAO exception hierarchy.

    * Integration with Hibernate, JDO, and iBATIS SQL Maps: in terms of resource
    holders, DAO implementation support, and transaction strategies. First-class
    Hibernate support with lots of IoC convenience features, addressing many typical
    Hibernate integration issues. All of these comply to Spring's generic
    transaction and DAO exception hierarchies.

    * AOP functionality, fully integrated into Spring configuration management. You
    can AOP-enable any object managed by Spring, adding aspects such as declarative
    transaction management. With Spring, you can have declarative transaction
    management without EJB... even without JTA, if you're using a single database in
    Tomcat or another web container without JTA support.

    * Flexible MVC web application framework, built on core Spring functionality.
    This framework is highly configurable via strategy interfaces, and accommodates
    multiple view technologies like JSP, Velocity, Tiles, iText, and POI. Note that
    a Spring middle tier can easily be combined with a web tier based on any other
    web MVC framework, like Struts, WebWork, or Tapestry.

    []

    You can use all of Spring's functionality in any J2EE server, and most of it
    also in non-managed environments. A central focus of Spring is to allow for
    reusable business and data access objects that are not tied to specific J2EE
    services. Such objects can be reused across J2EE environments (web or EJB),
    standalone applications, test environments, etc without any hassle.

    Spring has a layered architecture. All its functionality builds on lower levels.
    So you can e.g. use the JavaBeans configuration management without using the MVC
    framework or AOP support. But if you use the web MVC framework or AOP support,
    you'll find they build on the configuration framework, so you can apply your
    knowledge about it immediately.

    TODO: this abstract might be not be up to date.

<?xml version="1.0"?>

<!--
    Build file for the Spring Framework Rich Client Project (spring-richclient or spring-rcp)

    $Id$

    This script requires a "lib" directory containing the necessary third party JAR files.
    See project.properties for the definitions of the properties used in this file.

		Building spring-richclient requires J2SE 1.4; the "dist" JARs are built with Sun's JDK 1.4.2.
		Note: To successfully run the tests, you need to use Xerces or any other JAXP parser
		that properly supports XML includes. A simple way to achieve this is to put
		xml-apis.jar and xercesImpl.jar into your "JAVA_HOME/jre/lib/ext" directory.
-->

<project name="spring-richclient" default="usage" basedir=".">

	<property file="build.properties"/>
	<property file="project.properties"/>

	<path id="all-libs">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<target name="usage">
		<echo message=""/>
		<echo message="${name} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="build    --> build all; don't create JARs"/>
		<echo message="alljars  --> create all JAR files"/>
		<echo message="tests    --> run tests"/>
		<echo message=""/>
	</target>

	<target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc.)">
		<delete dir="${dist.dir}"/>
		<delete dir="${javadocs.dir}"/>
		<delete dir="${target.classes.dir}"/>
		<delete dir="${target.clover.dir}"/>
		<delete dir="${target.junit.reports.dir}"/>
		<delete dir="${target.loadclasses.dir}"/>
		<delete dir="${target.otherclasses.dir}"/>
		<delete dir="${target.release.dir}"/>
		<delete dir="${target.testclasses.dir}"/>
		<!-- just kill target dir (it's safer). No need at this point to keep it -->
		<delete dir="${target.dir}"/>
	</target>

	<!--
		Compile the main source tree.
	-->
	<target name="build"
		description="Compile main source tree java files into class files (no-jarring)">
		<mkdir dir="${target.classes.dir}"/>
		<mkdir dir="${target.classes.dir}/META-INF"/>
		<javac destdir="${target.classes.dir}" target="1.4" debug="${debug}"
			deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<classpath refid="all-libs"/>
		</javac>

		<copy todir="${target.classes.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
				<include name="**/*.dtd"/>
			</fileset>
		</copy>
	</target>

	<target name="initdist" description="Initialize the distribution directory">
		<mkdir dir="${dist.dir}"/>
	</target>

	<target name="modulejars" depends="build,initdist" description="Create module-specific JAR files">
		<delete>
			<fileset dir="${dist.dir}">
				<include name="spring-richclient.jar"/>
				<include name="spring-richclient-resources.jar"/>
			</fileset>
		</delete>

		<jar jarfile="${dist.dir}/spring-richclient.jar">
			<fileset dir="${target.classes.dir}">
				<include name="org/springframework/richclient/**"/>
			</fileset>
			<manifest>
				<attribute name="Spring-Version" value="${spring-version}"/>
			</manifest>
		</jar>
		
        <jar jarfile="${dist.dir}/spring-richclient-resources.jar"
               index="true"
             basedir="${resources.dir}">
			<manifest>
				<attribute name="Spring-Version" value="${spring-version}"/>
			</manifest>
        </jar>
	</target>

	<target name="fulljar" depends="build,initdist" description="Create full JAR file with all Spring classes">
		<delete file="${dist.dir}/spring-richclient.jar"/>
		<jar jarfile="${dist.dir}/spring-richclient.jar">
			<fileset dir="${target.classes.dir}">
				<include name="META-INF/**"/>
				<include name="org/springframework/richclient/**"/>
			</fileset>
			<manifest>
				<attribute name="Spring-Version" value="${spring-version}"/>
			</manifest>
		</jar>
	</target>

	<target name="srczip" depends="initdist" description="Create source ZIP (containing all Java sources)">
		<delete file="${dist.dir}/spring-richclient-src.zip"/>
		<zip zipfile="${dist.dir}/spring-richclient-src.zip">
			<fileset dir="${src.dir}">
				<include name="org/springframework/richclient/**"/>
			</fileset>
		</zip>
	</target>

	<target name="alljars" depends="modulejars,fulljar,srczip" description="Create all JAR files"/>

	<target name="javadoc" description="Generate framework Javadocs.">
		<mkdir dir="${javadocs.dir}"/>
		<javadoc sourcepath="src" destdir="${javadocs.dir}" windowtitle="Spring Framework Rich Client Platform (RCP)"
			defaultexcludes="yes"	author="true" version="true" use="true">
			<doctitle><![CDATA[<h1>Spring Framework Rich Client Project (RCP)</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright (C) 2003-2004 The Spring Framework Project.</i>]]></bottom>
			<classpath refid="all-libs"/>
			<packageset dir="${src.dir}">
				<include name="org/springframework/richclient/**"/>
			</packageset>
		</javadoc>
	</target>


	<target name="release" depends="alljars,javadoc" description="Generate release zip file">
		<mkdir dir="${target.release.dir}"/>

		<delete file="${target.release.dir}/${release.zip}"/>
		<delete file="${target.release.dir}/${release-with-dependencies.zip}"/>

		<fileset id="main" dir=".">
			<include name="dist/*.jar"/>
			<include name="dist/*.dtd"/>
			<include name="dist/*.tld"/>
			<include name="docs/**"/>
			<exclude name="docs/reference/**"/>
			<include name="samples/countries/**"/>
			<include name="samples/imagedb/**"/>
			<include name="samples/jpetstore/**"/>
			<include name="samples/petclinic/**"/>
			<include name="samples/tiles-example/**"/>
			<include name="samples/webapp-minimal/**"/>
			<include name="samples/webapp-typical/**"/>
			<include name="src/**"/>
			<include name="test/**"/>
			<include name="*.bat"/>
			<include name="*.txt"/>
			<include name="*.xml"/>
			<include name="*.properties"/>
		</fileset>

		<zip zipfile="${target.release.dir}/${release.zip}">
			<zipfileset refid="main" prefix="${release.path}"/>
		</zip>

		<zip zipfile="${target.release.dir}/${release-with-dependencies.zip}">
			<zipfileset refid="main" prefix="${release.path}"/>
			<zipfileset dir="." prefix="${release.path}">
				<include name="lib/jakarta-commons/**"/>
			</zipfileset>
		</zip>
	</target>

 	<target name="compiletestattr" depends="build"> 		
<!-- XXX: This is broken 	
		<taskdef resource="org/apache/commons/attributes/anttasks.properties">
		  <classpath refid="attribute-compiler-classpath"/>
		</taskdef>
-->		
	 	<!-- Compile to a temp directory: Commons Attributes will place Java Source here. -->
<!--  		
		<attribute-compiler destdir="${commons.attributes.tempdir.test}">
			<fileset dir="${test.dir}" includes="**/validator/*.java"/>
		</attribute-compiler>
-->			
 	</target>

	<!--
		This task depends on the Commons Attributes compile step,
		as some tests require source-level attribute support.
	-->
	<target name="buildtests" depends="compiletestattr"
		description="Compile test source tree Java files into class files">

		<mkdir dir="${target.testclasses.dir}"/>

		<javac destdir="${target.testclasses.dir}" target="1.4" debug="${debug}"
			deprecation="false" optimize="false" failonerror="true">
			<src path="${test.dir}"/>
			<!-- Include Commons Attributes generated Java sources -->
<!--			<src path="${commons.attributes.tempdir.test}"/> -->
			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>
		</javac>

		<!-- Pick up logging config from test directory -->
		<copy todir="${target.testclasses.dir}" preservelastmodified="true">
			<fileset dir="${test.dir}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<!--
		Run tests. This and Clover test target take their includes and excludes
		from build.properties. However it's possible to run specific tests by passing in
		the test.includes and (optionally) test.excludes properties through the command line, as below:
			ant tests -Dtest.includes=org/springframework/jdbc/**/*Test*
	-->
	<target name="tests" depends="buildtests" description="Run tests.">
		<property name="reports.dir" value="${target.junit.reports.dir}"/>
		<mkdir dir="${reports.dir}"/>
		<junit printsummary="yes" haltonfailure="yes">
			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>
			<classpath refid="all-libs"/>
			<formatter type="plain"/>

			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>
		</junit>
	</target>

	<target name="clover.build" description="Compile main source tree java files WITH CLOVER into class files">
		<!-- switch on Clover by specifying it as the compiler to use -->
		<property name="build.compiler" value="org.apache.tools.ant.taskdefs.CloverCompilerAdapter"/>
		<mkdir dir="${target.clover.dir}"/>

		<javac destdir="${target.clover.dir}" target="1.3" debug="${debug}"
			deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<classpath refid="all-libs"/>
		</javac>

		<copy todir="${target.clover.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
			</fileset>
		</copy>
	</target>


	<target name="clover.tests" depends="buildtests,clover.build" description="Run Clover tests">
		<junit printsummary="yes" haltonfailure="yes">
			<!-- Must go first to ensure the jndi.properties takes precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.clover.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>
			<classpath refid="all-libs"/>

			<batchtest fork="yes">
				<fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>
		</junit>
	</target>


	<!--
		Run test suite under Clover coverage analysis, and bring up
		Clover's Swing browser to display the results.
	-->
	<target name="clover.swing" depends="clover.tests" description="Run Clover tests and bring up Swing coverage viewer">
		<echo>Launching coverage viewer</echo>
		<java classname="com.cortexeb.tools.clover.reporters.jfc.Viewer" fork="yes">
			<arg value="${clover.initstring}"/>
			<classpath refid="all-libs"/>
		</java>
	</target>

	<!--
		Run test suite under Clover coverage analysis, and use Clover
		to generate Javadoc/style HTML results that may be browsed later.
	-->
	<target name="clover.html" depends="clover.tests" description="Generate Clover HTML coverage reports from an existing Clover database">
		<java classname="com.cortexeb.tools.clover.reporters.html.HtmlReporter" fork="yes">
			<arg line="-o '${target.clover.html.dir}' -i '${clover.initstring}' -t 'Spring Framework'"/>
			<classpath refid="all-libs"/>
		</java>
	</target>

	<target name="docclean" description="Delete temporary and distribution directories for docs">
		<delete quiet="true" dir="${basedir}/${dist.ref.dir}/pdf"/>
		<delete quiet="true" dir="${basedir}/${dist.ref.dir}/html_single"/>
		<delete quiet="true" dir="${basedir}/${dist.ref.dir}/html"/>
	</target>

	<target name="preparedocs" description="Extra preparation for the documentation"/>

	<target name="docpdf" depends="preparedocs" description="Compile reference documentation to pdf">
		<mkdir dir="${basedir}/${dist.ref.dir}/pdf/images"/>

		<copy todir="${basedir}/${dist.ref.dir}/pdf/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="-o"/>
			<arg value="${basedir}/${dist.ref.dir}/pdf/docbook_fop.tmp"/>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/fopdf.xsl"/>
		</java>

		<java classname="org.apache.fop.apps.Fop" fork="true" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="${basedir}/${dist.ref.dir}/pdf/docbook_fop.tmp"/>
			<arg value="${basedir}/${dist.ref.dir}/pdf/spring-reference.pdf"/>
		</java>
		<delete file="${dist.ref.dir}/pdf/docbook_fop.tmp"/>
	</target>

	<target name="dochtml" depends="preparedocs" description="Compile reference documentation to chunked html">
		<mkdir dir="${dist.ref.dir}/html/images"/>

		<copy todir="${basedir}/${dist.ref.dir}/html/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${dist.ref.dir}/html/">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/html_chunk.xsl"/>
		</java>
	</target>

	<target name="dochtmlsingle" description="Compile reference documentation to single html">
		<mkdir dir="${dist.ref.dir}/html_single/images"/>

		<copy todir="${basedir}/${dist.ref.dir}/html_single/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.dir}/reference/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="-o"/>
			<arg value="${basedir}/${dist.ref.dir}/html_single/index.html"/>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/html.xsl"/>
		</java>
	</target>

	<target name="refdoc" depends="dochtml,dochtmlsingle,docpdf" description="Generate and copy reference documentation"/>

	<target name="build-sandbox" description="Compile sandbox source tree java files into class files">

		<echo message="WARNING: To keep things speedy, there's no Ant-dependency on the build-target"/>
		<mkdir dir="${sandbox.target.classes.dir}"/>

		<javac destdir="${sandbox.target.classes.dir}" target="1.4" debug="${debug}"
				deprecation="false" optimize="false" failonerror="true">
			<src path="${sandbox.src.dir}"/>
			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>
		</javac>

		<copy todir="${sandbox.target.classes.dir}" preservelastmodified="true">
			<fileset dir="${sandbox.src.dir}">
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
			</fileset>
		</copy>

	</target>


	<target name="buildtests-sandbox" depends="buildtests"
			description="Compile test source tree Java files into class files">

		<mkdir dir="${sandbox.target.testclasses.dir}"/>

		<javac destdir="${sandbox.target.testclasses.dir}" target="1.4" debug="${debug}"
				deprecation="false" optimize="false" failonerror="true">
			<src path="${sandbox.test.dir}"/>
			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>
			<classpath location="${sandbox.target.classes.dir}"/>
			<classpath location="${target.testclasses.dir}"/>
		</javac>

		<!-- Pick up logging config from test directory -->
		<copy todir="${sandbox.target.testclasses.dir}" preservelastmodified="true">
			<fileset dir="${sandbox.test.dir}">
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir="${sandbox.test.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>

	</target>


	<!--
		Run test suite. This and Clover test target take their includes and excludes
		from build.properties. However it's possible to run specific tests by passing in
		the test.includes and (optionally) test.excludes properties through the command line, as below:
			ant tests -Dtest.includes=org/springframework/jdbc/**/*Test*
	-->
	<target name="tests-sandbox" depends="build-sandbox,buildtests-sandbox" description="Run tests">

		<property name="sandbox.reports.dir" value="${sandbox.target.junit.reports.dir}"/>

		<mkdir dir="${sandbox.reports.dir}"/>

		<junit printsummary="yes" haltonfailure="no" haltonerror="no">

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${sandbox.target.testclasses.dir}"/>
			<classpath location="${sandbox.target.classes.dir}"/>
			<classpath location="${target.testclasses.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${sandbox.test.dir}"/>

			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${sandbox.reports.dir}">
				<fileset dir="${sandbox.target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>

		</junit>

	</target>


	<target name="sandboxjar" depends="build,build-sandbox,initdist" description="Create jar with sandbox classes">

		<delete file="${dist.dir}/spring-rcp-sandbox.jar"/>

		<jar jarfile="${dist.dir}/spring-rcp-sandbox.jar">
			<fileset dir="${sandbox.target.classes.dir}">
				<include name="META-INF/**"/>
				<include name="org/springframework/**"/>
			</fileset>
			<manifest>
				<attribute name="Implementation-Title" value="${spring-title}"/>
				<attribute name="Implementation-Version" value="${spring-version}"/>
				<attribute name="Spring-Version" value="${spring-version}"/>
			</manifest>
		</jar>

	</target>
</project>

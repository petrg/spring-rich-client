<?xml version="1.0"?>

<project name="toplevel" default="usage" basedir=".">
    <!-- ===================== Initialize Properties ======================= -->
    <property file="build.properties"/>
    
    <!-- Construct compile classpath -->
    <path id="base.compile.classpath">
        <pathelement location="${target.classes.dir}"/>
    </path>
    
    <!-- ===================== Test Execution Defaults ======================= -->
    
    <!-- Construct unit test classpath -->
    <path id="test.classpath">
    	<path refid="base.compile.classpath"/>
		<pathelement location="${test.home}"/>
        <pathelement location="${target.tests.dir}"/>
        <pathelement location="${junit.jar}"/>
    </path>

    <!-- ===================== Runtime Execution Defaults ======================= -->
    
    <!-- Construct the runtime dist. classpath -->
    <path id="run.classpath">
    	<fileset dir="${dist.home}/lib" includes="*.jar"/>
  		<dirset dir="${dist.home}/conf"/>
    	<path refid="project.compile.classpath"/>
    </path>
        
    <!-- ===================== Executable Targets ======================= -->
    <target name="init" description="Initialize and setup.">
        <tstamp/>
        <echo message="-------- ${project.name} ${project.version} --------"/>
        <filter token="project.name" value="${project.name}"/>
        <filter token="project.package" value="${project.package}"/>
        <filter token="project.version" value="${project.version}"/>
    </target>
    
    <target name="build-prepare" depends="init" description="Prepare target build directory.">
        <mkdir dir="${build.home}"/>
        <mkdir dir="${target.classes.dir}"/>
        <mkdir dir="${target.tests.dir}"/>
        <mkdir dir="${target.conf.dir}"/>
    </target>
    
    <target name="build-static" depends="build-prepare" description="Copy static files (property files, manifests, etc.) to target conf directory.">
        <copy todir="${target.conf.dir}" filtering="on">
            <fileset dir="${conf.home}" includes="*.MF*"/>
        </copy>
	<available file="${images.home}" property="images.exists"/>
	    <antcall target="copy-images"/>

	<available file="${help.home}" property="help.exists"/>
	    <antcall target="copy-help"/>
    </target>

	<target name="copy-images" depends="build-prepare" if="images.exists" description="Copy image files if they exist.">
	    <!-- Copy any image files -->
        <copy todir="${target.images.dir}">
            <fileset dir="${images.home}" includes="**/*.gif"/>
            <fileset dir="${images.home}" includes="**/*.jpg"/>            
            <fileset dir="${images.home}" includes="**/*.png"/>            
        </copy>
    </target>

    <target name="copy-help" depends="build-prepare" if="help.exists" description="Copy help files if they exist.">
	<!-- Copy any help files -->
        <copy todir="${target.help.dir}">
            <fileset dir="${help.home}"/>
        </copy>
    </target>
    
    <target name="compile" depends="build-static" description="Compile java sources (incremental compile.)">
       <javac srcdir="${source.home}"
             destdir="${target.classes.dir}"
               debug="${compile.debug}"
         deprecation="${compile.deprecation}"
            optimize="${compile.optimize}">
            <classpath refid="base.compile.classpath"/>
            <classpath refid="project.compile.classpath"/>
       </javac>
       <!-- copy all other resource files within src tree -->
       <copy todir="${target.classes.dir}">
           <fileset dir="${source.home}" excludes="**/*.java"/>
       </copy>
    </target>
    
    <target name="clean" description="Clean target build and distribution directories.">
       <delete dir="${build.home}"/>
       <delete dir="${dist.home}"/>
    </target>
    
    <target name="clean-compile" depends="clean,compile" description="Compile java sources (clean re-compile.)"/>

    <target name="dist-prepare" depends="init" description="Create distribution directory">
       <mkdir dir="${dist.home}"/>
       <mkdir dir="${dist.lib.dir}"/>
       <copy file="license.txt" todir="${dist.home}"/>
       <copy file="release-notes.txt" todir="${dist.home}"/>
    </target>

    <target name="dist-static" depends="dist-prepare" description="Copy static files (.txt/properties/xml/scripts) to dist directory.">
		<available file="${bin.home}" property="bin.exists"/>
	    	<antcall target="copy-dist-bin"/>

		<available file="${conf.home}" property="conf.exists"/>
	    	<antcall target="copy-dist-conf"/>

        <antcall target="copy-dist-dependencies"/>
    </target>    

    <target name="copy-dist-bin" depends="dist-prepare" if="bin.exists" description="Copy startup scripts if they exist.">
        <!-- Copy executable .bat files and .sh files -->
        <copy todir="${dist.bin.dir}" filtering="on">
            <fileset dir="${bin.home}" includes="*.bat, *.sh"/>
        </copy>
	    <fixcrlf srcdir="${dist.home}/bin" includes="*.sh" eol="lf"/>
	    <fixcrlf srcdir="${dist.home}/bin" includes="*.bat" eol="crlf"/>
    	<chmod dir="${dist.home}/bin" includes="*.sh" perm="+x"/>
    </target>
	
    <target name="copy-dist-conf" depends="dist-prepare" if="conf.exists" description="Copy config files if they exist.">
	<!-- Copy text configuration files -->
        <copy todir="${dist.conf.dir}" filtering="on">
            <fileset dir="${conf.home}" includes="*.properties, *.xml, *.txt, *.csv"/>
        </copy>
    </target>
	
    <target name="copy-dist-dependencies" depends="dist-prepare" if="dist.with.dependencies" description="Copy runtime dependencies if specified.">
        <!-- Copy required libraries and external dependencies, projects should override -->
    </target>
	
    <target name="jar" depends="compile,dist-prepare" description="Create project jar file.">
        <mkdir dir="${target.classes.dir}/META-INF"/>
        <copy file="LICENSE.txt" tofile="${target.classes.dir}/META-INF/LICENSE.txt"/>
        <jar jarfile="${dist.lib.dir}/${project.name}.jar"
               index="true"
             basedir="${target.classes.dir}"
            manifest="${target.conf.dir}/MANIFEST.MF"/>
    </target>
    
    <target name="dist-lite" depends="compile,jar,dist-static,copy-dist-dependencies" description="Create a binary distribution without javadocs."/>
    
    <target name="javadoc" depends="compile,dist-prepare" unless="docs-uptodate" description="Create component API Javadocs.">
        <mkdir dir="${dist.home}/docs/api"/>
        <javadoc sourcepath="${source.home}"
                    destdir="${dist.javadocs.dir}"
               packagenames="${csi.package.prefix}.*"
                     author="true"
                    private="${javadoc.private}"
                   protected="${javadoc.protected}"
                   version="true"
                  overview="${source.home}/overview.html"
                 doctitle="&lt;h1&gt;${project.title} (Version ${project.version})&lt;/h1&gt;"
              windowtitle="${project.title} (Version ${project.version})"
                   bottom="${copyright}">
           <classpath refid="base.compile.classpath"/>
           <classpath refid="project.compile.classpath"/>           
        </javadoc>
    </target>
    
    <target name="dist" depends="dist-lite,javadoc" description="Create a binary distribution."/>
    
    <target name="dist-src" depends="dist" description="Create a binary distribution including the source code.">
        <!-- the src is similar with the JDK sources - and very useful for users of
             IDEs, where the jar can be "mounted" and used when debugging -->
        <jar file="${dist.home}/${project.name}-src.jar">
             <fileset dir="${source.home}" includes="**" />        
             <fileset dir="${conf.home}" includes="MANIFEST.MF" />
        </jar>
        
        <!-- ant helpers to quickly build -->
        <copy todir="${dist.home}">
            <fileset dir="${basedir}">
                <include name="build.xml"/>
                <include name="build.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="usage">
		<echo message=""/>
		<echo message="${project.name} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="compile --> build all; don't create distributable JARs"/>
		<echo message="dist    --> compile and create distributable JAR files"/>
		<echo message="test    --> run tests"/>
		<echo message=""/>
	</target>    
    
    <!-- ===================== Unit Test Targets ======================= -->
    <target name="compile.tests" depends="compile" description="Compile unit test cases.">
        <javac srcdir="${test.home}"
              destdir="${target.tests.dir}"
                debug="${compile.debug}"
          deprecation="${compile.deprecation}"
             optimize="${compile.optimize}">
           <classpath refid="test.classpath"/>
       </javac>
       <copy todir="${target.tests.dir}" filtering="on">
           <fileset dir="${test.home}" excludes="**/*.java"/>
       </copy>
    </target>
    
    <target name="test" depends="compile.tests" description="Run all unit tests.">
	<mkdir dir="${tests.report.dir}"/>
	<junit printsummary="yes" haltonfailure="yes" haltonerror="yes">
		<classpath refid="test.classpath"/>
		<formatter type="plain" usefile="false"/>
		<formatter type="xml"/>
		<batchtest fork="yes" todir="${test.report.dir}">
			<fileset dir="${target.tests.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
		</batchtest>
	</junit>
    </target>

    <!-- ===================== Runtime Targets ======================= -->
    <target name="run" depends="dist-lite" if="launcher.class" description="Runs the application." >
        <echo message="----- Launching ${project.name} -----"/>
        <java classname="${launcher.class}" fork="yes" failonerror="true">
            <classpath refid="run.classpath"/>
        </java>    
    </target>	

</project>
